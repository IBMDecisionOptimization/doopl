SWIG_BIN=$(SWIGDIR)/bin/swig

PROJECT_ROOT ?= ../..
COS_VERSION ?= 2210
PYTHON_TARGET ?= 3.8

PYTHON_EXE=$(PYTHON_HOME)/bin/python

ifeq ($(PYTHON_INCDIR),)
	PYTHON_INCDIR=$(shell $(PYTHON_EXE) -c "from sysconfig import get_path; print(get_path('include'))")
	PYTHON_PLATINCDIR=$(shell $(PYTHON_EXE) -c "from sysconfig import get_path; print(get_path('platinclude'))")
endif

# Set python lib and extra flags
PYTHON_LDFLAGS=
EXTRA_SWIG_FLAGS?=-py3

# all output files of this process go there
OUTPUT_DIR = $(COS_VERSION)/$(PYTHON_TARGET)

PYTHON_INCLUDES = -I$(PYTHON_INCDIR) -I$(PYTHON_PLATINCDIR)


SWIG_FLAGS= -w401 -v -module opl \
	-outdir $(OUTPUT_DIR) \
	-o $(OUTPUT_DIR)/opl_wrap.cxx \
	-oh $(OUTPUT_DIR)/opl_wrap.h \
	-python -c++ $(EXTRA_SWIG_FLAGS)

CC = g++

SRC_SWIG=$(PROJECT_ROOT)/src/main/swig

# System/lib-format specific compile/link flags
CSYSFLAGS  = -fPIC -fexceptions -ffloat-store -Wall -Wno-long-long -DIL_STD
LDSYSFLAGS =  -lpthread -shared

# Compilation and linking flags enabling Multi-threading
CMTFLAGS = -DILOUSEMT -D_REENTRANT
LDMTFLAGS = -lpthread -ldl -shared -lstdc++ -ldl -Wl,-rpath,.

CFLAGS = $(CSYSFLAGS) $(CMTFLAGS)

SYSTEM = x86-64_linux
LIBFORMAT = static_pic

LDFLAGS = \
        $(PYTHON_LDFLAGS) \
        -L$(OPLDIR)/bin/$(SYSTEM) \
                -lopl$(COS_VERSION) \
        -L$(OPLDIR)/lib/$(SYSTEM)/$(LIBFORMAT) \
                 -liljs\
        -L$(OPLDIR)/bin/$(SYSTEM) \
                  -loplnl1 -lcplex$(COS_VERSION)  -ldl \
        -L$(OPLDIR)/bin/$(SYSTEM) \
                -licuuc -licui18n -licuio -licudata \
        $(LDSYSFLAGS) $(LDMTFLAGS) $(LDOPTIONS)

# Code optimization/debugging options
DEBUG = -O1 -fomit-frame-pointer -DNDEBUG
POST_LINK =

INTERNAL_DIR = $(PROJECT_ROOT)/src/main/python/doopl/internal/opl$(COS_VERSION)

all: generate compile link

clean:
	rm -rf $(COS_VERSION) $(PROJECT_ROOT)/target/reports/report*.py$(PYTHON_TARGET).*.xml $(INTERNAL_DIR)/*opl.*

generate: $(SRC_SWIG)/opl.i
	if [ ! -d $(COS_VERSION) ]; then mkdir $(COS_VERSION); fi
	if [ ! -d $(OUTPUT_DIR) ]; then mkdir $(OUTPUT_DIR); fi
	$(SWIG_BIN) $(SWIG_FLAGS) $(SRC_SWIG)/opl.i
	mv $(OUTPUT_DIR)/opl_wrap.cxx $(OUTPUT_DIR)/opl_wrap.cxx.old
	sed -e 's/new SwigDirector_IloOplDataSourceWrapper/new (arg2) SwigDirector_IloOplDataSourceWrapper/g' \
		$(OUTPUT_DIR)/opl_wrap.cxx.old > $(OUTPUT_DIR)/opl_wrap.cxx

compile: generate
	$(CC) -c $(OUTPUT_DIR)/opl_wrap.cxx $(PYTHON_INCLUDES) -I$(OPLDIR)/include $(CFLAGS) $(DEBUG) -o $(OUTPUT_DIR)/opl_wrap.o

link: compile
	$(CC) $(LDSYSFLAGS) $(OUTPUT_DIR)/opl_wrap.o $(LDFLAGS) -o $(OUTPUT_DIR)/_opl.so
	$(POST_LINK)

install_in_src: generate compile link
	if [ ! -d $(INTERNAL_DIR) ]; then mkdir $(INTERNAL_DIR); fi
	cp $(OUTPUT_DIR)/opl.py $(OUTPUT_DIR)/_opl.so $(INTERNAL_DIR)

test:
	$(PYTHON_EXE) $(PROJECT_ROOT)/tools/run_test.py --opl_dir $(OPLDIR) --opl_version $(COS_VERSION) Mulprod.py
	$(PYTHON_EXE) $(PROJECT_ROOT)/tools/run_test.py --opl_dir $(OPLDIR) --opl_version $(COS_VERSION) Convert.py
	$(PYTHON_EXE) $(PROJECT_ROOT)/tools/run_test.py --opl_dir $(OPLDIR) --opl_version $(COS_VERSION) DataFeed.py
	$(PYTHON_EXE) $(PROJECT_ROOT)/tools/run_test.py --opl_dir $(OPLDIR) --opl_version $(COS_VERSION) LagrangianRelaxation.py
	$(PYTHON_EXE) $(PROJECT_ROOT)/tools/run_test.py --opl_dir $(OPLDIR) --opl_version $(COS_VERSION) LovingHearts.py
	$(PYTHON_EXE) $(PROJECT_ROOT)/tools/run_test.py --opl_dir $(OPLDIR) --opl_version $(COS_VERSION) Mulprod_main.py
	$(PYTHON_EXE) $(PROJECT_ROOT)/tools/run_test.py --opl_dir $(OPLDIR) --opl_version $(COS_VERSION) Relaxation.py
	$(PYTHON_EXE) $(PROJECT_ROOT)/tools/run_test.py --opl_dir $(OPLDIR) --opl_version $(COS_VERSION) RunSeed.py
